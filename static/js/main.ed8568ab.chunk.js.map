{"version":3,"sources":["components/Input.js","components/Installation.js","components/App.js","serviceWorker.js","index.js"],"names":["Input","_ref","name","text","children","react_default","a","createElement","className","Installation","processor","hostname","username","partition_device","partition_efi","partition_root","Fragment","concat","App","_useState","useState","_useState2","Object","slicedToArray","setProcessor","params","handleProcessor","event","target","value","style","marginBottom","type","checked","onChange","entries","map","_ref2","_ref2$","setValue","key","assign","apply","toConsumableArray","_ref3","_ref4","defineProperty","Boolean","window","location","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed8568ab.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default ({ name, text, children }) => (\n  <li className=\"Input\">\n    {name && <h5>{name}</h5>}\n    <code>{children}</code>\n    {text && <p>{text}</p>}\n  </li>\n);\n","import React from \"react\";\n\nimport Input from \"./Input.js\";\n\nconst AURMAN_PGP = \"465022E743D71E39\";\n\nexport default ({\n  processor,\n  hostname,\n  username,\n  partition_device,\n  partition_efi,\n  partition_root\n}) => (\n  <>\n    <h3>Pre-installation (live environment)</h3>\n    <ol>\n      <Input name=\"Set keyboard layout\">loadkeys dk</Input>\n      <Input\n        name=\"Verify EFI boot mode\"\n        text=\"If the directory does not exist, you need to find a way to reboot into EFI boot\n        mode\"\n      >\n        ls /sys/firmware/efi/efivars\n      </Input>\n      <Input name=\"Update system clock\">timedatectl set-ntp true</Input>\n      <Input\n        name=\"Partition the disks\"\n        text={`Example: ${partition_efi} EFI partition 550 MiB, ${partition_root} linux partition remaining space`}\n      >\n        gdisk {partition_device}\n      </Input>\n\n      <Input name=\"Format EFI partition\">mkfs.fat -F32 {partition_efi}</Input>\n      <Input\n        name=\"Format root partition\"\n        text=\"Use whatever file system you wish\"\n      >\n        mkfs.btrfs {partition_root}\n      </Input>\n      <Input name=\"Mount root file system\">mount {partition_root} /mnt</Input>\n      <Input name=\"Create EFI mount point\">mkdir /mnt/boot</Input>\n      <Input name=\"Mount EFI file system\">\n        mount {partition_efi} /mnt/boot\n      </Input>\n    </ol>\n    <h3>Installation</h3>\n    <ol>\n      <Input name=\"Install pacman tools\">pacman -S pacman-contrib</Input>\n      <Input text=\"This monster fetches nearby mirrors, ranks them and persists them in config (which will also be copied over during the following command). It takes a while, grab a coffee.\">\n        curl -s\n        \"https://www.archlinux.org/mirrorlist/?country=DK&country=DE&country=NL&country=SE&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on\"\n        | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - >\n        /etc/pacman.d/mirrorlist\n      </Input>\n      <Input name=\"Install base packages\">\n        pacstrap /mnt base base-devel {processor}-ucode\n      </Input>\n    </ol>\n    <h3>Configuration</h3>\n    <ol>\n      <Input name=\"Generate fstab file\">\n        genfstab -U /mnt >> /mnt/etc/fstab\n      </Input>\n      <Input name=\"Change root into new system\">arch-chroot /mnt</Input>\n    </ol>\n    <h4>Localization</h4>\n    <ol>\n      <Input name=\"Set the time zone\">\n        ln -sf /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime\n      </Input>\n      <Input name=\"Write software UTC time to hardware\">\n        hwclock --systohc\n      </Input>\n      <Input name=\"Uncomment locales to generate\">\n        nano /etc/locale.gen\n        <pre>\n          <code>\n            {`en_DK.UTF-8 UTF-8\nen_US.UTF-8 UTF-8`}\n          </code>\n        </pre>\n      </Input>\n      <Input name=\"Generate locales\">locale-gen</Input>\n      <Input name=\"Set LANG\">echo 'LANG=en_DK.UTF-8' > /etc/locale.conf</Input>\n      <Input name=\"Persist keymap\">echo 'KEYMAP=dk' > /etc/vconsole.conf</Input>\n    </ol>{\" \"}\n    <h4>Networking</h4>\n    <ol>\n      <Input name=\"Set hostname\">echo '{hostname}' > /etc/hostname</Input>\n      <Input name=\"Configure hosts file\">\n        nano /etc/hosts\n        <pre>\n          <code>\n            {`127.0.0.1\\tlocalhost\n::1\\t\\tlocalhost`}\n          </code>\n        </pre>\n      </Input>\n    </ol>\n    <h4>Password & bootloader</h4>\n    <ol>\n      <Input name=\"Set root password\">passwd</Input>\n      <Input name=\"Install bootloader\">bootctl install</Input>\n      <Input\n        name=\"Configure bootloader\"\n        text=\"You can also edit /boot/loader/loader.conf to increase timeout if you are dual booting-windows (otherwise you will boot directly to linux)\"\n      >\n        nano /boot/loader/entries/arch.conf\n        <pre>\n          <code>\n            {`title Arch Linux\nlinux /vmlinuz-linux\ninitrd /${processor}-ucode.img\ninitrd /initramfs-linux.img\noptions root=${partition_root} rw`}\n          </code>\n        </pre>\n      </Input>\n      <Input name=\"Reboot into new system\">\n        exit && umount -R /mnt && reboot\n      </Input>\n    </ol>\n    <h3>Userspace setup</h3>\n    <ol>\n      <Input\n        name=\"Create regular user\"\n        text=\"wheel is for sudo, audio is for audio\"\n      >\n        useradd --create-home --groups audio wheel {username}\n      </Input>\n      <Input name=\"Set user password\">passwd {username}</Input>\n      <Input name=\"Enable sudo for wheel group\">visudo</Input>\n      <Input name=\"Change to regular user\">su {username}</Input>\n    </ol>\n    <h4>Install aurman</h4>\n    <ol>\n      <Input>\n        curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/aurman.tar.gz\n      </Input>\n      <Input name=\"Import GnuPG key\">gpg --recv-keys {AURMAN_PGP}</Input>\n      <Input name=\"Unpack\">tar -xvf aurman.tar.gz</Input>\n      <Input>cd aurman</Input>\n      <Input name=\"Compile and install\">makepkg -si</Input>\n    </ol>\n    <h4>Install important AUR packages</h4>\n    <ol>\n      <Input name=\"IMPORTANT: bootctl update hook\">\n        aurman -Syu systemd-boot-pacman-hook\n      </Input>\n    </ol>\n    <h4>Install all the good shit</h4>\n    <ol>\n      <Input>\n        sudo pacman -Syu docker docker-compose openssh termite unzip ...\n      </Input>\n    </ol>\n  </>\n);\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Installation from \"./Installation.js\";\nimport UserSpaceSetup from \"./UserSpaceSetup.js\";\n\nconst App = () => {\n  const [processor, setProcessor] = useState(\"amd\");\n\n  const params = {\n    username: useState(\"zach\"),\n    hostname: useState(\"ballz-pc\"),\n    partition_device: useState(\"/dev/sdX\"),\n    partition_efi: useState(\"/dev/sdX1\"),\n    partition_root: useState(\"/dev/sdX2\")\n  };\n\n  function handleProcessor(event) {\n    setProcessor(event.target.value);\n  }\n\n  return (\n    <>\n      <div className=\"controls\" style={{ marginBottom: \"2rem\" }}>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"processor\"\n            value=\"intel\"\n            checked={processor === \"intel\"}\n            onChange={handleProcessor}\n          />{\" \"}\n          Intel\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"processor\"\n            value=\"amd\"\n            checked={processor === \"amd\"}\n            onChange={handleProcessor}\n          />{\" \"}\n          AMD\n        </label>\n        {Object.entries(params).map(([name, [value, setValue]]) => (\n          <input\n            key={name}\n            type=\"text\"\n            value={value}\n            onChange={event => setValue(event.target.value)}\n          />\n        ))}\n      </div>\n      <h1>Installation cheatsheet</h1>\n      <div className=\"App\">\n        <Installation\n          processor={processor}\n          {...Object.assign(\n            ...Object.entries(params).map(([name, [value]]) => ({\n              [name]: value\n            }))\n          )}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.js\";\nimport * as serviceWorker from \"./serviceWorker.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}