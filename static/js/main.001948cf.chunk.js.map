{"version":3,"sources":["types.ts","components/Input.tsx","components/Installation.tsx","components/EnumRadio.tsx","components/CheatSheet.tsx","serviceWorker.ts","index.tsx","components/App.tsx"],"names":["Firmware","Processor","Editor","FileSystem","Kernel","name","text","children","useState","checked","setChecked","className","onClick","editor","kernel","fileSystem","processor","firmware","hostname","username","partitionDevice","partitionBoot","partitionRoot","isUEFI","UEFI","strapPackages","aurPackages","push","toLowerCase","Input","join","length","wiki","legend","options","value","onChange","handleChange","event","target","href","Object","values","map","option","key","type","App","EXT4","setFileSystem","AMD","setProcessor","setFirmware","LINUX","setKernel","VIM","setEditor","setUsername","setHostname","setPartitionDevice","setPartitionBoot","settings","label","setValue","style","marginBottom","display","flexWrap","EnumRadio","Installation","Boolean","window","location","match","ReactDOM","render","CheatSheet","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAAYA,EAKAC,EAKAC,EAKAC,EAKAC,E,8CCZG,cAAsC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAsB,EACpBC,oBAAS,GADW,mBAC3CC,EAD2C,KAClCC,EADkC,KAElD,OACE,wBACEC,UAAS,gBAAWF,GAAW,WAC/BG,QAAS,kBAAMF,GAAW,SAACD,GAAD,OAAcA,OAEvCJ,GAAQ,4BAAKA,GACd,8BAAOE,GACND,GAAQ,2BAAIA,M,SDjBPN,K,YAAAA,E,aAAAA,M,cAKAC,K,UAAAA,E,eAAAA,M,cAKAC,K,UAAAA,E,aAAAA,M,cAKAC,K,YAAAA,E,eAAAA,M,cAKAC,K,cAAAA,E,sBAAAA,E,gCAAAA,E,uBAAAA,M,KEdZ,IAee,cAWD,IAVZS,EAUW,EAVXA,OACAC,EASW,EATXA,OACAC,EAQW,EARXA,WACAC,EAOW,EAPXA,UACAC,EAMW,EANXA,SACAC,EAKW,EALXA,SACAC,EAIW,EAJXA,SACAC,EAGW,EAHXA,gBACAC,EAEW,EAFXA,cACAC,EACW,EADXA,cAEMC,EAASN,IAAajB,EAASwB,KAE/BC,EAAgB,CAACX,EAAQD,EAAQ,OAAQ,cACzCa,EAAc,GAQpB,OALIH,IACFE,EAAcE,KAAd,UAAsBX,EAAUY,cAAhC,gBACAF,EAAYC,KAAK,6BAIjB,oCACE,mEACA,4BACE,kBAACE,EAAD,CAAOxB,KAAI,uBAAX,eACCkB,GACC,kBAACM,EAAD,CACExB,KAAK,uBACLC,KAAK,wFAFP,gCAQF,kBAACuB,EAAD,CAAOxB,KAAK,uBAAZ,4BACA,kBAACwB,EAAD,CACExB,KAAK,sBACLC,KAAI,mBAAce,EAAd,mCAAsDC,EAAtD,YAAuER,EAAvE,+BAEHS,EAAS,QAAU,QAJtB,IAIgCH,GAE/BG,GACC,kBAACM,EAAD,CACExB,KAAK,uBACLC,KAAK,gIAFP,iBAIiBe,GAGnB,kBAACQ,EAAD,CAAOxB,KAAK,yBAAZ,QACQU,EADR,IACqBO,GAErB,kBAACO,EAAD,CAAOxB,KAAK,0BAAZ,SAA4CiB,EAA5C,SACCC,GACC,oCACE,kBAACM,EAAD,CAAOxB,KAAK,0BAAZ,mBACA,kBAACwB,EAAD,CAAOxB,KAAK,yBAAZ,SACSgB,EADT,gBAMN,4CACA,4BACE,kBAACQ,EAAD,CACExB,KAAK,0BACLC,KAAK,0WAEJO,EAJH,6BAMA,kBAACgB,EAAD,CACExB,KAAK,wBACLC,KAAK,oEAFP,iBAIiBmB,EAAcK,KAAK,OAGtC,6CACA,4BACE,kBAACD,EAAD,CAAOxB,KAAK,uBAAZ,sCAGA,kBAACwB,EAAD,CAAOxB,KAAK,+BAAZ,oBACA,kBAACwB,EAAD,CAAOxB,KAAK,qBAAZ,UACA,kBAACwB,EAAD,CAAOxB,KAAK,sBAAZ,gBACgBQ,EADhB,0BAIF,4CACA,4BACE,kBAACgB,EAAD,CAAOxB,KAAK,qBAAZ,+DAGA,kBAACwB,EAAD,CAAOxB,KAAK,uCAAZ,qBAGA,kBAACwB,EAAD,CAAOxB,KAAK,iCACTQ,EADH,mBAEE,6BACE,wEAMJ,kBAACgB,EAAD,CAAOxB,KAAK,oBAAZ,cACA,kBAACwB,EAAD,CAAOxB,KAAK,YAAZ,8CAGA,kBAACwB,EAAD,CAAOxB,KAAK,kBAAZ,0CAGI,IACN,0CACA,4BACE,kBAACwB,EAAD,CAAOxB,KAAK,gBAAZ,SAAkCa,EAAlC,qBACA,kBAACW,EAAD,CAAOxB,KAAK,wBACTQ,EADH,cAEE,6BACE,2EAON,0CACCU,EACC,4BACE,kBAACM,EAAD,CAAOxB,KAAK,sBAAZ,mBACA,kBAACwB,EAAD,CACExB,KAAK,8BACLC,KAAK,wCAFP,mBAImBgB,GAEnB,kBAACO,EAAD,CACExB,KAAK,uBACLC,KAAK,8IAEJO,EAJH,kCAKE,6BACE,0DACwBC,EADxB,6BAEGA,EAFH,qBAGJE,EAAUY,cAHN,yCAIMd,EAJN,mEASJ,sDACA,kBAACe,EAAD,CAAOxB,KAAK,gBAAZ,QACA,kBAACwB,EAAD,CAAOxB,KAAK,sBAAZ,6BAGF,4BACE,kBAACwB,EAAD,CAAOxB,KAAK,gBAAZ,oBACA,kBAACwB,EAAD,CAAOxB,KAAK,sBAAZ,iCACiCe,GAEjC,kBAACS,EAAD,CAAOxB,KAAK,wBAAZ,wCAGA,sDACA,kBAACwB,EAAD,CAAOxB,KAAK,gBAAZ,QACA,kBAACwB,EAAD,CAAOxB,KAAK,sBAAZ,6BAGJ,+CACA,4BACE,kBAACwB,EAAD,CAAOxB,KAAK,sBAAsBC,KAAK,iCAAvC,wCACwCa,GAExC,kBAACU,EAAD,CAAOxB,KAAK,qBAAZ,UAAwCc,GACxC,kBAACU,EAAD,CACExB,KAAK,8BACLC,KAAK,+GAFP,SAKE,6BACE,wDAGJ,kBAACuB,EAAD,CAAOxB,KAAK,0BAAZ,MAAyCc,IAE3C,8CACA,4BACE,kBAACU,EAAD,iFAIA,kBAACA,EAAD,CAAOxB,KAAK,oBAAZ,mBAlNW,oBAmNX,kBAACwB,EAAD,CAAOxB,KAAK,UAAZ,0BACA,kBAACwB,EAAD,kBACA,kBAACA,EAAD,CAAOxB,KAAK,uBAAZ,gBAEDqB,EAAYK,OAAS,GACpB,oCACE,8DACA,4BACE,kBAACF,EAAD,CACEvB,KACEiB,GACA,4EAHJ,eAMeG,EAAYI,KAAK,QAKtC,yDACA,4BACE,kBAACD,EAAD,yBAzMe,CAAC,OAAQ,SAAU,UAAW,WAyMPC,KAAK,KAA3C,WCnOO,cAA8D,IAA3DE,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,OAAQ5B,EAA4C,EAA5CA,KAAM6B,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAC9CC,EAAe,SAACC,GAAD,OACnBF,EAASE,EAAMC,OAAOJ,QAExB,OACE,kCACE,gCACGH,EACC,uBAAGQ,KAAI,+CAA0CR,IAASC,GAE1DA,GAGHQ,OAAOC,OAAOR,GAASS,KAAI,SAACC,GAAD,OAC1B,2BAAOC,IAAKD,GACV,2BACEE,KAAK,QACLzC,KAAMA,EACN8B,MAAOS,EACPnC,QAASmC,IAAWT,EACpBC,SAAUC,IANd,WAQOO,SCuHAG,EAhJH,WAAO,IAAD,EACoBvC,mBAASL,EAAW6C,MADxC,mBACTjC,EADS,KACGkC,EADH,OAEkBzC,mBAASP,EAAUiD,KAFrC,mBAETlC,EAFS,KAEEmC,EAFF,OAGgB3C,mBAASR,EAASwB,MAHlC,mBAGTP,EAHS,KAGCmC,EAHD,OAIY5C,mBAASJ,EAAOiD,OAJ5B,mBAITvC,EAJS,KAIDwC,EAJC,OAKY9C,mBAASN,EAAOqD,KAL5B,mBAKT1C,EALS,KAKD2C,EALC,OAMgBhD,mBAAS,QANzB,mBAMTW,EANS,KAMCsC,EAND,OAOgBjD,mBAAS,YAPzB,mBAOTU,EAPS,KAOCwC,EAPD,OAQ8BlD,mBAAS,iBARvC,mBAQTY,EARS,KAQQuC,EARR,OAS0BnD,mBAAS,kBATnC,mBASTa,EATS,KASMuC,EATN,OAU0BpD,mBAAS,kBAVnC,mBAUTc,EAVS,KAYVuC,EAAW,CACf,CACEC,MAAO,WACPzD,KAAM,WACN8B,MAAOhB,EACP4C,SAAUN,GAEZ,CACEK,MAAO,WACPzD,KAAM,WACN8B,MAAOjB,EACP6C,SAAUL,GAEZ,CACEI,MAAO,mBACPzD,KAAM,mBACN8B,MAAOf,EACP2C,SAAUJ,GAEZ,CACEG,MAAO,iBACPzD,KAAM,iBACN8B,MAAOb,EACPyC,SAnCY,OAuCVxC,EAASN,IAAajB,EAASwB,KAUrC,OARID,GACFsC,EAASlC,KAAK,CACZmC,MAAO,iBACPzD,KAAM,iBACN8B,MAAOd,EACP0C,SAAUH,IAIZ,oCACE,yBAAKjD,UAAU,WAAWqD,MAAO,CAAEC,aAAc,SAC/C,wCACA,wBAAID,MAAO,CAAEE,QAAS,OAAQC,SAAU,SACtC,4BACE,kBAACC,EAAD,CACEpC,KAAK,wCACLC,OAAO,WACP5B,KAAK,WACL6B,QAASlC,EACTmC,MAAOlB,EACPmB,SAAUgB,KAGb7B,GACC,4BACE,kBAAC6C,EAAD,CACEpC,KAAK,YACLC,OAAO,YACP5B,KAAK,YACL6B,QAASjC,EACTkC,MAAOnB,EACPoB,SAAUe,KAIhB,4BACE,kBAACiB,EAAD,CACEpC,KAAK,wBACLC,OAAO,SACP5B,KAAK,SACL6B,QAAShC,EACTiC,MAAOtB,EACPuB,SAAUoB,KAGd,4BACE,kBAACY,EAAD,CACEpC,KAAK,eACLC,OAAO,cACP5B,KAAK,cACL6B,QAAS/B,EACTgC,MAAOpB,EACPqB,SAAUa,KAGd,4BACE,kBAACmB,EAAD,CACEpC,KAAK,SACLC,OAAO,SACP5B,KAAK,SACL6B,QAAS9B,EACT+B,MAAOrB,EACPsB,SAAUkB,MAIhB,wBAAIU,MAAO,CAAEE,QAAS,OAAQC,SAAU,SACrCN,EAASlB,KAAI,gBAAGmB,EAAH,EAAGA,MAAOzD,EAAV,EAAUA,KAAM8B,EAAhB,EAAgBA,MAAO4B,EAAvB,EAAuBA,SAAvB,OACZ,wBAAIlB,IAAKxC,GACP,+BACGyD,EACD,6BACA,2BACEjB,IAAKxC,EACLA,KAAMA,EACNyC,KAAK,OACLX,MAAOA,EACPC,SAAU,SAACE,GAAD,OAAWyB,EAASzB,EAAMC,OAAOJ,iBAOvD,uDACA,yBAAKxB,UAAU,OACb,kBAAC0D,EAAD,CACEtD,WAAYA,EACZC,UAAWA,EACXC,SAAUA,EACVJ,OAAQA,EACRC,OAAQA,EACRK,SAAUA,EACVD,SAAUA,EACVE,gBAAiBA,EACjBC,cAAeA,EACfC,cAAeA,O,MCrILgD,QACW,cAA7BC,OAAOC,SAAStD,UAEe,UAA7BqD,OAAOC,SAAStD,UAEhBqD,OAAOC,SAAStD,SAASuD,MACvB,2DCZNC,IAASC,OAAO,mBCDD,WACb,OAAO,kBAACC,EAAD,QDAO,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.001948cf.chunk.js","sourcesContent":["export enum Firmware {\n  UEFI = \"UEFI\",\n  BIOS = \"BIOS\",\n}\n\nexport enum Processor {\n  AMD = \"AMD\",\n  INTEL = \"Intel\",\n}\n\nexport enum Editor {\n  VIM = \"vim\",\n  NANO = \"nano\",\n}\n\nexport enum FileSystem {\n  EXT4 = \"ext4\",\n  BTRFS = \"btrfs\",\n}\n\nexport enum Kernel {\n  LINUX = \"linux\",\n  LINUX_LTS = \"linux-lts\",\n  LINUX_HARDENED = \"linux-hardened\",\n  LINUX_ZEN = \"linux-zen\",\n}\n","import React, { useState } from \"react\";\n\ninterface Props {\n  name?: any;\n  text?: any;\n  children: any;\n}\n\nexport default ({ name, text, children }: Props) => {\n  const [checked, setChecked] = useState(false);\n  return (\n    <li\n      className={`Input ${checked && \"checked\"}`}\n      onClick={() => setChecked((checked) => !checked)}\n    >\n      {name && <h5>{name}</h5>}\n      <code>{children}</code>\n      {text && <p>{text}</p>}\n    </li>\n  );\n};\n","import React from \"react\";\n\nimport Input from \"./Input\";\n\nimport { Processor, Firmware, Editor, FileSystem, Kernel } from \"../types\";\n\nconst AURMAN_PGP = \"465022E743D71E39\";\n\ninterface Props {\n  editor: Editor;\n  kernel: Kernel;\n  fileSystem: FileSystem;\n  processor: Processor;\n  firmware: Firmware;\n  hostname: any;\n  username: any;\n  partitionDevice: any;\n  partitionBoot: any;\n  partitionRoot: any;\n}\n\nexport default ({\n  editor,\n  kernel,\n  fileSystem,\n  processor,\n  firmware,\n  hostname,\n  username,\n  partitionDevice,\n  partitionBoot,\n  partitionRoot,\n}: Props) => {\n  const isUEFI = firmware === Firmware.UEFI;\n\n  const strapPackages = [kernel, editor, \"base\", \"base-devel\"];\n  const aurPackages = [];\n  const userPackages = [\"xorg\", \"docker\", \"openssh\", \"termite\"];\n\n  if (isUEFI) {\n    strapPackages.push(`${processor.toLowerCase()}â€‘ucode`);\n    aurPackages.push(\"systemd-boot-pacman-hook\");\n  }\n\n  return (\n    <>\n      <h3>Pre-installation (live environment)</h3>\n      <ol>\n        <Input name={`Set keyboard layout`}>loadkeys dk</Input>\n        {isUEFI && (\n          <Input\n            name=\"Verify EFI boot mode\"\n            text=\"If the directory does not exist, you need to find a way to reboot into EFI boot\n        mode\"\n          >\n            ls /sys/firmware/efi/efivars\n          </Input>\n        )}\n        <Input name=\"Update system clock\">timedatectl set-ntp true</Input>\n        <Input\n          name=\"Partition the disks\"\n          text={`Example: ${partitionBoot} EFI partition 550 MiB, ${partitionRoot} ${kernel} partition remaining space`}\n        >\n          {isUEFI ? \"gdisk\" : \"fdisk\"} {partitionDevice}\n        </Input>\n        {isUEFI && (\n          <Input\n            name=\"Format EFI partition\"\n            text=\"IMPORTANT: Refer to the wiki if you are dual booting, formatting your EFI partition will most likely make Windows unbootable\"\n          >\n            mkfs.fat -F32 {partitionBoot}\n          </Input>\n        )}\n        <Input name=\"Format root partition\">\n          mkfs.{fileSystem} {partitionRoot}\n        </Input>\n        <Input name=\"Mount root file system\">mount {partitionRoot} /mnt</Input>\n        {isUEFI && (\n          <>\n            <Input name=\"Create EFI mount point\">mkdir /mnt/boot</Input>\n            <Input name=\"Mount EFI file system\">\n              mount {partitionBoot} /mnt/boot\n            </Input>\n          </>\n        )}\n      </ol>\n      <h3>Installation</h3>\n      <ol>\n        <Input\n          name=\"Choose download mirrors\"\n          text=\"The higher a mirror is placed in the list, the more priority it is given when downloading a package. You may want to edit the file accordingly, and move the geographically closest mirrors to the top of the list, although other criteria should be taken into account. This file will later be copied to the new system by pacstrap, so it is worth getting right. \"\n        >\n          {editor} /etc/pacman.d/mirrorlist\n        </Input>\n        <Input\n          name=\"Install base packages\"\n          text=\"NOTE: If you are fucked, it might help to install linux-firmware\"\n        >\n          pacstrap /mnt {strapPackages.join(\" \")}\n        </Input>\n      </ol>\n      <h3>Configuration</h3>\n      <ol>\n        <Input name=\"Generate fstab file\">\n          genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n        </Input>\n        <Input name=\"Change root into new system\">arch-chroot /mnt</Input>\n        <Input name=\"Set root password\">passwd</Input>\n        <Input name=\"Set default editor\">\n          echo 'EDITOR={editor}' &gt;&gt; /etc/environment\n        </Input>\n      </ol>\n      <h4>Localization</h4>\n      <ol>\n        <Input name=\"Set the time zone\">\n          ln -sf /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime\n        </Input>\n        <Input name=\"Write software UTC time to hardware\">\n          hwclock --systohc\n        </Input>\n        <Input name=\"Uncomment locales to generate\">\n          {editor} /etc/locale.gen\n          <pre>\n            <code>\n              {`en_DK.UTF-8 UTF-8\nen_US.UTF-8 UTF-8`}\n            </code>\n          </pre>\n        </Input>\n        <Input name=\"Generate locales\">locale-gen</Input>\n        <Input name=\"Set LANG\">\n          echo 'LANG=en_DK.UTF-8' &gt; /etc/locale.conf\n        </Input>\n        <Input name=\"Persist keymap\">\n          echo 'KEYMAP=dk' &gt; /etc/vconsole.conf\n        </Input>\n      </ol>{\" \"}\n      <h4>Networking</h4>\n      <ol>\n        <Input name=\"Set hostname\">echo '{hostname}' &gt; /etc/hostname</Input>\n        <Input name=\"Configure hosts file\">\n          {editor} /etc/hosts\n          <pre>\n            <code>\n              {`127.0.0.1\\tlocalhost\n::1\\t\\tlocalhost`}\n            </code>\n          </pre>\n        </Input>\n      </ol>\n      <h4>Bootloader</h4>\n      {isUEFI ? (\n        <ol>\n          <Input name=\"Install bootloader\">bootctl install</Input>\n          <Input\n            name=\"Read UUID of root partition\"\n            text=\"You will need this for the next step\"\n          >\n            lsblk -dno UUID {partitionRoot}\n          </Input>\n          <Input\n            name=\"Configure bootloader\"\n            text=\"You can also edit /boot/loader/loader.conf to increase timeout if you are dual booting-windows (otherwise you will boot directly to linux)\"\n          >\n            {editor} /boot/loader/entries/arch.conf\n            <pre>\n              <code>\n                {`title Arch Linux (${kernel})\nlinux /vmlinuz-${kernel}\ninitrd /${processor.toLowerCase()}-ucode.img\ninitrd /initramfs-${kernel}.img\noptions root=\"UUID=put-here-the-uuid-you-got-above\" rw`}\n              </code>\n            </pre>\n          </Input>\n          <h4>Reboot into new system</h4>\n          <Input name=\"Leave chroot\">exit</Input>\n          <Input name=\"Unmount and reboot\">umount -R /mnt && reboot</Input>\n        </ol>\n      ) : (\n        <ol>\n          <Input name=\"Install GRUB\">pacman -Syu grub</Input>\n          <Input name=\"Install bootloader\">\n            grub install --target=i386-pc {partitionDevice}\n          </Input>\n          <Input name=\"Configure bootloader\">\n            grub-mkconfig -o /boot/grub/grub.cfg\n          </Input>\n          <h4>Reboot into new system</h4>\n          <Input name=\"Leave chroot\">exit</Input>\n          <Input name=\"Unmount and reboot\">umount -R /mnt && reboot</Input>\n        </ol>\n      )}\n      <h3>Userspace setup</h3>\n      <ol>\n        <Input name=\"Create regular user\" text=\"The `wheel` group is for sudo\">\n          useradd --create-home --groups wheel {username}\n        </Input>\n        <Input name=\"Set user password\">passwd {username}</Input>\n        <Input\n          name=\"Enable sudo for wheel group\"\n          text=\"Uncomment the above to allow members of group `wheel` to execute any command (after entering root password)\"\n        >\n          visudo\n          <pre>\n            <code>%wheel ALL=(ALL) ALL</code>\n          </pre>\n        </Input>\n        <Input name=\"Change to regular user\">su {username}</Input>\n      </ol>\n      <h4>Install aurman</h4>\n      <ol>\n        <Input>\n          curl -L -O\n          https://aur.archlinux.org/cgit/aur.git/snapshot/aurman.tar.gz\n        </Input>\n        <Input name=\"Import GnuPG key\">gpg --recv-keys {AURMAN_PGP}</Input>\n        <Input name=\"Unpack\">tar -xvf aurman.tar.gz</Input>\n        <Input>cd aurman</Input>\n        <Input name=\"Compile and install\">makepkg -si</Input>\n      </ol>\n      {aurPackages.length > 0 && (\n        <>\n          <h4>Install important AUR packages</h4>\n          <ol>\n            <Input\n              text={\n                isUEFI &&\n                \"IMPORTANT: the bootctl update hook is needed to ensure microcode updates\"\n              }\n            >\n              aurman -Syu {aurPackages.join(\" \")}\n            </Input>\n          </ol>\n        </>\n      )}\n      <h4>Install all the good shit</h4>\n      <ol>\n        <Input>sudo pacman -Syu {userPackages.join(\" \")} ...</Input>\n      </ol>\n    </>\n  );\n};\n","import React, { ChangeEvent } from \"react\";\n\ninterface Props {\n  legend: string;\n  name: string;\n  options: object;\n  value: string;\n  onChange: any;\n  wiki?: string;\n}\n\nexport default ({ wiki, legend, name, options, value, onChange }: Props) => {\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) =>\n    onChange(event.target.value);\n\n  return (\n    <fieldset>\n      <legend>\n        {wiki ? (\n          <a href={`https://wiki.archlinux.org/index.php/${wiki}`}>{legend}</a>\n        ) : (\n          legend\n        )}\n      </legend>\n      {Object.values(options).map((option) => (\n        <label key={option}>\n          <input\n            type=\"radio\"\n            name={name}\n            value={option}\n            checked={option === value}\n            onChange={handleChange}\n          />\n          {` ${option}`}\n        </label>\n      ))}\n    </fieldset>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport Installation from \"./Installation\";\n\nimport { Kernel, Editor, Processor, Firmware, FileSystem } from \"../types\";\n\nimport EnumRadio from \"./EnumRadio\";\n\nconst App = () => {\n  const [fileSystem, setFileSystem] = useState(FileSystem.EXT4);\n  const [processor, setProcessor] = useState(Processor.AMD);\n  const [firmware, setFirmware] = useState(Firmware.UEFI);\n  const [kernel, setKernel] = useState(Kernel.LINUX);\n  const [editor, setEditor] = useState(Editor.VIM);\n  const [username, setUsername] = useState(\"zach\");\n  const [hostname, setHostname] = useState(\"ballz-pc\");\n  const [partitionDevice, setPartitionDevice] = useState(\"/dev/nvme0n1p\");\n  const [partitionBoot, setPartitionBoot] = useState(\"/dev/nvme0n1p1\");\n  const [partitionRoot, setPartitionRoot] = useState(\"/dev/nvme0n1p2\");\n\n  const settings = [\n    {\n      label: \"Username\",\n      name: \"username\",\n      value: username,\n      setValue: setUsername,\n    },\n    {\n      label: \"Hostname\",\n      name: \"hostname\",\n      value: hostname,\n      setValue: setHostname,\n    },\n    {\n      label: \"Partition Device\",\n      name: \"partition_device\",\n      value: partitionDevice,\n      setValue: setPartitionDevice,\n    },\n    {\n      label: \"Partition Root\",\n      name: \"partition_root\",\n      value: partitionRoot,\n      setValue: setPartitionRoot,\n    },\n  ];\n\n  const isUEFI = firmware === Firmware.UEFI;\n\n  if (isUEFI)\n    settings.push({\n      label: \"Partition Boot\",\n      name: \"partition_boot\",\n      value: partitionBoot,\n      setValue: setPartitionBoot,\n    });\n\n  return (\n    <>\n      <div className=\"controls\" style={{ marginBottom: \"2rem\" }}>\n        <h2>Settings</h2>\n        <ol style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n          <li>\n            <EnumRadio\n              wiki=\"Unified_Extensible_Firmware_Interface\"\n              legend=\"Firwmare\"\n              name=\"firmware\"\n              options={Firmware}\n              value={firmware}\n              onChange={setFirmware}\n            />\n          </li>\n          {isUEFI && (\n            <li>\n              <EnumRadio\n                wiki=\"Microcode\"\n                legend=\"Processor\"\n                name=\"processor\"\n                options={Processor}\n                value={processor}\n                onChange={setProcessor}\n              />\n            </li>\n          )}\n          <li>\n            <EnumRadio\n              wiki=\"Category:Text_editors\"\n              legend=\"Editor\"\n              name=\"editor\"\n              options={Editor}\n              value={editor}\n              onChange={setEditor}\n            />\n          </li>\n          <li>\n            <EnumRadio\n              wiki=\"File_systems\"\n              legend=\"File system\"\n              name=\"file_system\"\n              options={FileSystem}\n              value={fileSystem}\n              onChange={setFileSystem}\n            />\n          </li>\n          <li>\n            <EnumRadio\n              wiki=\"Kernel\"\n              legend=\"Kernel\"\n              name=\"kernel\"\n              options={Kernel}\n              value={kernel}\n              onChange={setKernel}\n            />\n          </li>\n        </ol>\n        <ol style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n          {settings.map(({ label, name, value, setValue }) => (\n            <li key={name}>\n              <label>\n                {label}\n                <br />\n                <input\n                  key={name}\n                  name={name}\n                  type=\"text\"\n                  value={value}\n                  onChange={(event) => setValue(event.target.value)}\n                />\n              </label>\n            </li>\n          ))}\n        </ol>\n      </div>\n      <h1>Installation cheatsheet</h1>\n      <div className=\"App\">\n        <Installation\n          fileSystem={fileSystem}\n          processor={processor}\n          firmware={firmware}\n          editor={editor}\n          kernel={kernel}\n          username={username}\n          hostname={hostname}\n          partitionDevice={partitionDevice}\n          partitionBoot={partitionBoot}\n          partitionRoot={partitionRoot}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nimport CheatSheet from \"./CheatSheet\";\nimport \"./App.css\";\n\nexport default () => {\n  return <CheatSheet />;\n};\n"],"sourceRoot":""}