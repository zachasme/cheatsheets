{"version":3,"sources":["types.ts","components/Input.tsx","components/Installation.tsx","components/EnumRadio.tsx","components/CheatSheet.tsx","serviceWorker.ts","index.tsx","components/App.tsx"],"names":["Firmware","Processor","Input","_ref","name","text","children","react_default","a","createElement","className","Installation","processor","firmware","hostname","username","partitionDevice","partitionBoot","partitionRoot","isUEFI","UEFI","strapPackages","aurPackages","push","concat","toLowerCase","Fragment","join","EnumRadio","options","value","onChange","handleChange","event","target","Object","values","map","option","key","type","checked","App","_useState","useState","AMD","_useState2","slicedToArray","setProcessor","_useState3","_useState4","setFirmware","_useState5","_useState6","setUsername","_useState7","_useState8","setHostname","_useState9","_useState10","setPartitionDevice","_useState11","_useState12","setPartitionBoot","_useState13","_useState14","settings","label","setValue","style","marginBottom","Boolean","window","location","match","ReactDOM","render","CheatSheet","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e366912.chunk.js","sourcesContent":["export enum Firmware {\r\n  UEFI = \"UEFI\",\r\n  BIOS = \"BIOS\"\r\n}\r\n\r\nexport enum Processor {\r\n  AMD = \"AMD\",\r\n  INTEL = \"Intel\"\r\n}\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  name?: any;\r\n  text?: any;\r\n  children: any;\r\n}\r\n\r\nexport default ({ name, text, children }: Props) => (\r\n  <li className=\"Input\">\r\n    {name && <h5>{name}</h5>}\r\n    <code>{children}</code>\r\n    {text && <p>{text}</p>}\r\n  </li>\r\n);\r\n","import React from \"react\";\r\n\r\nimport Input from \"./Input\";\r\n\r\nimport { Processor, Firmware } from \"../types\";\r\n\r\nconst AURMAN_PGP = \"465022E743D71E39\";\r\n\r\ninterface Props {\r\n  processor: Processor;\r\n  firmware: Firmware;\r\n  hostname: any;\r\n  username: any;\r\n  partitionDevice: any;\r\n  partitionBoot: any;\r\n  partitionRoot: any;\r\n}\r\n\r\nexport default ({\r\n  processor,\r\n  firmware,\r\n  hostname,\r\n  username,\r\n  partitionDevice,\r\n  partitionBoot,\r\n  partitionRoot\r\n}: Props) => {\r\n  const isUEFI = firmware === Firmware.UEFI;\r\n\r\n  const strapPackages = [\"base\", \"base-devel\"];\r\n  const aurPackages = [\"spotify\"];\r\n\r\n  if (isUEFI) {\r\n    strapPackages.push(`${processor.toLowerCase()}â€‘ucode`);\r\n    aurPackages.push(\"systemd-boot-pacman-hook\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>Pre-installation (live environment)</h3>\r\n      <ol>\r\n        <Input name={`Set keyboard layout`}>loadkeys dk</Input>\r\n        {isUEFI && (\r\n          <Input\r\n            name=\"Verify EFI boot mode\"\r\n            text=\"If the directory does not exist, you need to find a way to reboot into EFI boot\r\n        mode\"\r\n          >\r\n            ls /sys/firmware/efi/efivars\r\n          </Input>\r\n        )}\r\n        <Input name=\"Update system clock\">timedatectl set-ntp true</Input>\r\n        <Input\r\n          name=\"Partition the disks\"\r\n          text={`Example: ${partitionBoot} EFI partition 550 MiB, ${partitionRoot} linux partition remaining space`}\r\n        >\r\n          {isUEFI ? \"gdisk\" : \"fdisk\"} {partitionDevice}\r\n        </Input>\r\n        {isUEFI && (\r\n          <Input name=\"Format EFI partition\">\r\n            mkfs.fat -F32 {partitionBoot}\r\n          </Input>\r\n        )}\r\n        <Input\r\n          name=\"Format root partition\"\r\n          text=\"Use whatever file system you wish\"\r\n        >\r\n          mkfs.btrfs {partitionRoot}\r\n        </Input>\r\n        <Input name=\"Mount root file system\">mount {partitionRoot} /mnt</Input>\r\n        {isUEFI && (\r\n          <>\r\n            <Input name=\"Create EFI mount point\">mkdir /mnt/boot</Input>\r\n            <Input name=\"Mount EFI file system\">\r\n              mount {partitionBoot} /mnt/boot\r\n            </Input>\r\n          </>\r\n        )}\r\n      </ol>\r\n      <h3>Installation</h3>\r\n      <ol>\r\n        <Input name=\"Install pacman tools\">pacman -Syu pacman-contrib</Input>\r\n        <Input text=\"This monster fetches nearby mirrors, ranks them and persists them in config (which will also be copied over during the following command). It takes a while, grab a coffee. If you dare, this is a shortened url: https://1n.pm/mirrorlist\">\r\n          curl -s\r\n          \"https://www.archlinux.org/mirrorlist/?country=DK&country=DE&country=NL&country=SE&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on\"\r\n          | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - >\r\n          /etc/pacman.d/mirrorlist\r\n        </Input>\r\n        <Input name=\"Install base packages\">\r\n          pacstrap /mnt {strapPackages.join(\" \")}\r\n        </Input>\r\n      </ol>\r\n      <h3>Configuration</h3>\r\n      <ol>\r\n        <Input name=\"Generate fstab file\">\r\n          genfstab -U /mnt >> /mnt/etc/fstab\r\n        </Input>\r\n        <Input name=\"Change root into new system\">arch-chroot /mnt</Input>\r\n        <Input name=\"Set root password\">passwd</Input>\r\n      </ol>\r\n      <h4>Localization</h4>\r\n      <ol>\r\n        <Input name=\"Set the time zone\">\r\n          ln -sf /usr/share/zoneinfo/Europe/Copenhagen /etc/localtime\r\n        </Input>\r\n        <Input name=\"Write software UTC time to hardware\">\r\n          hwclock --systohc\r\n        </Input>\r\n        <Input name=\"Uncomment locales to generate\">\r\n          nano /etc/locale.gen\r\n          <pre>\r\n            <code>\r\n              {`en_DK.UTF-8 UTF-8\r\nen_US.UTF-8 UTF-8`}\r\n            </code>\r\n          </pre>\r\n        </Input>\r\n        <Input name=\"Generate locales\">locale-gen</Input>\r\n        <Input name=\"Set LANG\">\r\n          echo 'LANG=en_DK.UTF-8' > /etc/locale.conf\r\n        </Input>\r\n        <Input name=\"Persist keymap\">\r\n          echo 'KEYMAP=dk' > /etc/vconsole.conf\r\n        </Input>\r\n      </ol>{\" \"}\r\n      <h4>Networking</h4>\r\n      <ol>\r\n        <Input name=\"Set hostname\">echo '{hostname}' > /etc/hostname</Input>\r\n        <Input name=\"Configure hosts file\">\r\n          nano /etc/hosts\r\n          <pre>\r\n            <code>\r\n              {`127.0.0.1\\tlocalhost\r\n::1\\t\\tlocalhost`}\r\n            </code>\r\n          </pre>\r\n        </Input>\r\n      </ol>\r\n      <h4>Bootloader</h4>\r\n      {isUEFI ? (\r\n        <ol>\r\n          <Input name=\"Install bootloader\">bootctl install</Input>\r\n          <Input\r\n            name=\"Configure bootloader\"\r\n            text=\"You can also edit /boot/loader/loader.conf to increase timeout if you are dual booting-windows (otherwise you will boot directly to linux)\"\r\n          >\r\n            nano /boot/loader/entries/arch.conf\r\n            <pre>\r\n              <code>\r\n                {`title Arch Linux\r\nlinux /vmlinuz-linux\r\ninitrd /${processor.toLowerCase()}-ucode.img\r\ninitrd /initramfs-linux.img\r\noptions root=${partitionRoot} rw`}\r\n              </code>\r\n            </pre>\r\n          </Input>\r\n          <h4>Reboot into new system</h4>\r\n          <Input name=\"Leave chroot\">exit</Input>\r\n          <Input name=\"Unmount and reboot\">umount -R /mnt && reboot</Input>\r\n        </ol>\r\n      ) : (\r\n        <ol>\r\n          <Input name=\"Install GRUB\">pacman -Syu grub</Input>\r\n          <Input name=\"Install bootloader\">\r\n            grub install --target=i386-pc {partitionDevice}\r\n          </Input>\r\n          <Input name=\"Configure bootloader\">\r\n            grub-mkconfig -o /boot/grub/grub.cfg\r\n          </Input>\r\n          <h4>Reboot into new system</h4>\r\n          <Input name=\"Leave chroot\">exit</Input>\r\n          <Input name=\"Unmount and reboot\">umount -R /mnt && reboot</Input>\r\n        </ol>\r\n      )}\r\n      <h3>Userspace setup</h3>\r\n      <ol>\r\n        <Input\r\n          name=\"Create regular user\"\r\n          text=\"wheel is for sudo, audio is for audio\"\r\n        >\r\n          useradd --create-home --groups audio,wheel {username}\r\n        </Input>\r\n        <Input name=\"Set user password\">passwd {username}</Input>\r\n        <Input name=\"Enable sudo for wheel group\">visudo</Input>\r\n        <Input name=\"Change to regular user\">su {username}</Input>\r\n      </ol>\r\n      <h4>Install aurman</h4>\r\n      <ol>\r\n        <Input>\r\n          curl -L -O\r\n          https://aur.archlinux.org/cgit/aur.git/snapshot/aurman.tar.gz\r\n        </Input>\r\n        <Input name=\"Import GnuPG key\">gpg --recv-keys {AURMAN_PGP}</Input>\r\n        <Input name=\"Unpack\">tar -xvf aurman.tar.gz</Input>\r\n        <Input>cd aurman</Input>\r\n        <Input name=\"Compile and install\">makepkg -si</Input>\r\n      </ol>\r\n      <h4>Install important AUR packages</h4>\r\n      <ol>\r\n        <Input\r\n          text={\r\n            isUEFI &&\r\n            \"IMPORTANT: the bootctl update hook is needed to ensure microcode updates\"\r\n          }\r\n        >\r\n          aurman -Syu {aurPackages.join(\" \")}\r\n        </Input>\r\n      </ol>\r\n      <h4>Install all the good shit</h4>\r\n      <ol>\r\n        <Input>\r\n          sudo pacman -Syu docker docker-compose openssh termite unzip ...\r\n        </Input>\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React, { ChangeEvent } from \"react\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  options: object;\r\n  value: string;\r\n  onChange: any;\r\n}\r\n\r\nexport default ({ name, options, value, onChange }: Props) => {\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) =>\r\n    onChange(event.target.value);\r\n\r\n  return (\r\n    <>\r\n      {Object.values(options).map(option => (\r\n        <label key={option}>\r\n          <input\r\n            type=\"radio\"\r\n            name={name}\r\n            value={option}\r\n            checked={option === value}\r\n            onChange={handleChange}\r\n          />\r\n          {` ${option}`}\r\n        </label>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport Installation from \"./Installation\";\r\n\r\nimport { Processor, Firmware } from \"../types\";\r\n\r\nimport EnumRadio from \"./EnumRadio\";\r\n\r\nconst App = () => {\r\n  const [processor, setProcessor] = useState(Processor.AMD);\r\n  const [firmware, setFirmware] = useState(Firmware.UEFI);\r\n  const [username, setUsername] = useState(\"zach\");\r\n  const [hostname, setHostname] = useState(\"ballz-pc\");\r\n  const [partitionDevice, setPartitionDevice] = useState(\"/dev/sdX\");\r\n  const [partitionBoot, setPartitionBoot] = useState(\"/dev/sdX1\");\r\n  const [partitionRoot, setPartitionRoot] = useState(\"/dev/sdX2\");\r\n\r\n  const settings = [\r\n    {\r\n      label: \"Username\",\r\n      name: \"username\",\r\n      value: username,\r\n      setValue: setUsername\r\n    },\r\n    {\r\n      label: \"Hostname\",\r\n      name: \"hostname\",\r\n      value: hostname,\r\n      setValue: setHostname\r\n    },\r\n    {\r\n      label: \"Partition Device\",\r\n      name: \"partition_device\",\r\n      value: partitionDevice,\r\n      setValue: setPartitionDevice\r\n    },\r\n    {\r\n      label: \"Partition Root\",\r\n      name: \"partition_root\",\r\n      value: partitionRoot,\r\n      setValue: setPartitionRoot\r\n    }\r\n  ];\r\n\r\n  const isUEFI = firmware === Firmware.UEFI;\r\n\r\n  if (isUEFI)\r\n    settings.push({\r\n      label: \"Partition Boot\",\r\n      name: \"partition_boot\",\r\n      value: partitionBoot,\r\n      setValue: setPartitionBoot\r\n    });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"controls\" style={{ marginBottom: \"2rem\" }}>\r\n        <ol>\r\n          <li>\r\n            <EnumRadio\r\n              name=\"firmware\"\r\n              options={Firmware}\r\n              value={firmware}\r\n              onChange={setFirmware}\r\n            />\r\n          </li>\r\n          {isUEFI && (\r\n            <li>\r\n              <EnumRadio\r\n                name=\"processor\"\r\n                options={Processor}\r\n                value={processor}\r\n                onChange={setProcessor}\r\n              />\r\n            </li>\r\n          )}\r\n\r\n          {settings.map(({ label, name, value, setValue }) => (\r\n            <li key={name}>\r\n              <label>\r\n                {label}\r\n                <input\r\n                  key={name}\r\n                  name={name}\r\n                  type=\"text\"\r\n                  value={value}\r\n                  onChange={event => setValue(event.target.value)}\r\n                />\r\n              </label>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n      <h1>Installation cheatsheet</h1>\r\n      <div className=\"App\">\r\n        <Installation\r\n          firmware={firmware}\r\n          processor={processor}\r\n          username={username}\r\n          hostname={hostname}\r\n          partitionDevice={partitionDevice}\r\n          partitionBoot={partitionBoot}\r\n          partitionRoot={partitionRoot}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\n\r\nimport CheatSheet from \"./CheatSheet\";\r\nimport \"./App.css\";\r\n\r\nexport default () => {\r\n  return <CheatSheet />;\r\n};\r\n"],"sourceRoot":""}